apiVersion: v1
data:
  detection_template.yaml: |
    # Rule name, must be unique
    name: Alert on any detection

    # Index to search, wildcard supported
    index: bitsensor
    timestamp_field: endpoint.localtime

    # Type of alert.
    type: any
    realert:
      seconds: 0

    # A list of elasticsearch filters used for find events
    # These filters are joined with AND and nested in a filtered query
    # For more info: http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/query-dsl.html
    filter:
    - query:
        query_string:
          query: "_exists_:detections"

    include:
      - endpoint.location
      - endpoint.name
      - context.http.userAgent
      - context.ip
      - context.php.session.sessionId
      - detections
      - meta.user


    # Enhancement for converting 'detections' array into object, ex. get merged detection type by
    # 'detections_parsed.type' or get first detection type by 'detection_parsed.0.type'
    match_enhancements:
    - "elastalert_modules.bitsensor_enhancement.AlertTextEnhancement"
    run_enhancements_first: true


    alert_subject: ":exclamation: Detection on {}"
    alert_subject_args:
      - endpoint.name

    alert_text_type: alert_text_only
    alert_text: "Triggered at _{}_\n\n*Attacker:*\nIP: {} \nUser-Agent: {}\nDetection: `{}`\n\n:Id: {}\nUser: {}"
    alert_text_args:
      - endpoint.localtime
      - context.ip
      - context.http.userAgent
      - detections_parsed.type
      - _id
      - meta.user

    # The alert is use when a match is found
    alert:
      - slack
    slack_webhook_url: "https://hooks.slack.com/services/"
    slack_username_override: "ElastAlert"
  error_jira_template.yaml: |
    # Rule name, must be unique
    name: Alert on any error

    # Index to search, wildcard supported
    index: bitsensor
    timestamp_field: endpoint.localtime

    # Type of alert.
    type: any
    realert:
      seconds: 0

    # A list of elasticsearch filters used for find events
    # These filters are joined with AND and nested in a filtered query
    # For more info: http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/query-dsl.html
    filter:
    - query:
        query_string:
          query: "_exists_:errors"

    include:
      - endpoint.location
      - endpoint.name
      - context.http.userAgent
      - context.ip
      - errors
      - meta.user


    # Enhancement for converting 'detections' array into object, ex. get merged detection type by
    # 'detections_parsed.type' or get first detection type by 'detection_parsed.0.type'
    match_enhancements:
    - "elastalert_modules.bitsensor_enhancement.AlertTextEnhancement"
    run_enhancements_first: true


    alert_subject: "Error on {}"
    alert_subject_args:
      - endpoint.name

    alert_text_type: alert_text_only
    alert_text: "Triggered at _{}_\n\n*Attacker:*\nIP: {} \nUser-Agent: {}\nError: *{}*\n\nId: {}\nUser: {}"
    alert_text_args:
      - endpoint.localtime
      - context.ip
      - context.http.userAgent
      - errors_parsed.type
      - _id
      - meta.user

    # The alert is use when a match is found
    alert:
      - jira

    jira_server: https://bitsensor.atlassian.net
    jira_project: SA
    jira_issuetype: Story
    jira_labels: error

    # Add jira_acct.txt to rules folder
    # The file is yaml formatted and must contain fields: 'user', 'password'
    jira_account_file: "rules/jira_acct.txt"
  integration_started_template.yaml: |
    # Rule name, must be unique
    name: Integration Started

    # Alert on x events in y seconds
    type: frequency

    # Alert when this many documents matching the query occur within a timeframe
    num_events: 1

    # num_events must occur within this amount of time to trigger an alert
    timeframe:
      hours: 1

    # When the attacker continues, send a new alert after x minutes
    realert:
      days: 7

    query_key:
      - meta.provider
      - endpoint.name

    include:
      - meta.provider
      - endpoint.name

    alert_subject: "Integration started on <{}> | <{}|Show Dashboard>"
    alert_subject_args:
      - endpoint.name
      - kibana_link

    alert_text: |-
      Integration on {} has started with plugin {}.

    alert_text_args:
      - endpoint.name
      - meta.provider

    # The alert when a match is found
    alert:
      - slack

    slack_webhook_url: "https://hooks.slack.com/services/"
    slack_username_override: "ElastAlert"

    # Alert body only cointains a title and text
    alert_text_type: alert_text_only

    # Link to BitSensor Kibana Dashboard
    use_kibana4_dashboard: "https://kibana.dashboard.io/app/kibana#/dashboard"

    # Index to search, wildcard supported
    index: bitsensor
    timestamp_field: endpoint.localtime
    doc_type: datapoint
  no_data_template.yaml: |
    # Alert when no data has been received for more then 30 seconds.

    # Rule name, must be unique
    name: No Data

    # Type of alert.
    type: flatline

    # Alert when this many documents matching the query occur within a timeframe
    threshold: 1
    use_terms: true

    # num_events must occur within this amount of time to trigger an alert
    timeframe:
      seconds: 30

    realert:
      minutes: 10

    exponential_realert:
      hours: 1

    doc_type: datapoint

    # Index to search, wildcard supported
    index: bitsensor
    timestamp_field: endpoint.localtime

    alert_subject: "No data on dashboard"

    alert_text_type: alert_text_only
    alert_text: "The stack receives no data. It might be down :("

    # The alert is use when a match is found
    alert:
      - slack
    slack_webhook_url: "https://hooks.slack.com/services/"
    slack_username_override: "ElastAlert"
  relevant_attack_template.yaml: |
    # Index to search, wildcard supported
    name: Known Attacks

    # Alert on each event
    type: any

    # A list of elasticsearch filters used for find events
    # These filters are joined with AND and nested in a filtered query
    # For more info: http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/query-dsl.html
    filter:
    - query:
        query_string:
          query: "detections.reason:KNOWN_ATTACK"

    index: bitsensor-detections-*
    timestamp_field: endpoint.localtime

    # Key per profile
    query_key:
      - context.ip
      - context.http.userAgent

    # When the attacker continues, send a new alert after x minutes
    realert:
      minutes: 10

    # Index to search, wildcard supported
    include:
      - endpoint.location
      - endpoint.name
      - context.http.userAgent
      - context.ip
      - context.php.session.sessionId
      - detections

    alert_subject: "Attack on <{}> of type {} | <{}|Show Dashboard>"
    alert_subject_args:
      - endpoint.name
      - detections_parsed.type
      - kibana_link

    alert_text: |-
      An attack on {} is detected.
      Detection name: {}
      Detection type: {}

      The attacker looks like:
      IP: {}
      User-Agent: {}

    alert_text_args:
      - endpoint.name
      - detections_parsed.name
      - detections_parsed.type
      - context.ip
      - context.http.userAgent

    # Specify your services here
    alert:
      - slack

    # How To Generate your API:
    # Click on your Workspace name (upper left corner)
    # Go to "Manage Apps", then "Custom Integrations", "Incoming Webhooks"
    # Press "Add Configuration", and choose your channel. Now paste it here:
    slack_webhook_url: "https://hooks.slack.com/services/"
    slack_username_override: "BitSensor Alerting"

    # Alert body only cointains a title and text
    alert_text_type: alert_text_only

    # Link to BitSensor Kibana Dashboard
    use_kibana4_dashboard: "https://kibana.dashboard.io/app/kibana#/dashboard"

    # Enhancement for converting 'detections' array into object, ex. get merged detection type by
    # 'detections_parsed.type' or get first detection type by 'detection_parsed.0.type'
    match_enhancements:
    - "elastalert_modules.bitsensor_enhancement.AlertTextEnhancement"
    run_enhancements_first: true
  spike_template.yml: |
    # Rule name, must be unique
    name: Spike in attacks on server

    # Type of alert.
    type: spike

    # num_events must occur within this amount of time to trigger an alert
    timeframe:
      seconds: 60
    spike_height: 10
    spike_type: up

    # Index to search, wildcard supported
    index: bitsensor
    timestamp_field: endpoint.localtime

    query_key:
      - endpoint.name

    alert_subject: "Surge in attacks on {}"
    alert_subject_args:
      - endpoint.name

    alert_text_type: alert_text_only
    alert_text: "Surge in attacks on {}"
    alert_text_args:
      - endpoint.name

    # The alert is use when a match is found
    alert:
      - slack
    slack_webhook_url: "https://hooks.slack.com/services/"
    slack_username_override: "ElastAlert"
  successful_attack_template.yaml: |
    # Rule name, must be unique
    name: Alert on Successful Attack

    # Type of alert.
    type: any

    realert:
      seconds: 0

    # Index to search, wildcard supported
    index: bitsensor
    timestamp_field: endpoint.localtime

    # A list of elasticsearch filters used for find events
    # These filters are joined with AND and nested in a filtered query
    # For more info: http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/query-dsl.html
    filter:
    - query:
        query_string:
          query: "detections.successful:true"

    include:
      - endpoint.location
      - endpoint.name
      - context.http.userAgent
      - context.ip
      - context.php.session.sessionId
      - detections.type
      - detections.name
      - meta.user
      - errors

    alert_subject: "Successful attack on {}"
    alert_subject_args:
      - endpoint.name

    alert_text_type: alert_text_only
    alert_text: "Detection triggered at {}\nIP: {} \nUser-Agent: {}\n\nID: {}\nUser: {}"
    alert_text_args:
      - endpoint.localtime
      - context.ip
      - context.http.userAgent
      - _id
      - meta.user

    # The alert is use when a match is found
    alert:
      - slack
    slack_webhook_url: "https://hooks.slack.com/services/"
    slack_username_override: "ElastAlert"
  threshold_template.yml: |
    # Alert when there are 500 discovery detection events coming from the same ip, userAgent within 30 seconds.

    # Rule name, must be unique
    name: Attack threshold exceeded

    # Type of alert.
    type: percentage_match

    # Alert when this many documents matching the query occur within a timeframe
    max_percentage: 10

    # num_events must occur within this amount of time to trigger an alert
    timeframe:
      seconds: 60

    # Index to search, wildcard supported
    index: bitsensor
    timestamp_field: endpoint.localtime

    query_key:
      - context.ip

    # A list of elasticsearch filters used for find events
    # These filters are joined with AND and nested in a filtered query
    # For more info: http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/query-dsl.html
    match_bucket_filter:
    - query:
        query_string:
          query: "_exists_:detections"

    include:
      - endpoint.location
      - endpoint.name
      - context.http.userAgent
      - context.ip
      - context.php.session.sessionId
      - detections.type
      - detections.name
      - meta.user
      - errors

    alert_subject: "Attack threshold exceeded by {}"
    alert_subject_args:
      - context.ip

    alert_text_type: alert_text_only
    alert_text: "Time: {}\nIP: {} \nUser-Agent: {}\n\nID: {}\nUser: {}"
    alert_text_args:
      - endpoint.localtime
      - context.ip
      - context.http.userAgent
      - _id
      - meta.user

    # The alert is use when a match is found
    alert:
      - slack
    slack_webhook_url: "https://hooks.slack.com/services/"
    slack_username_override: "ElastAlert"
  volumetric_alert_template.yaml: |
    # Rule name, must be unique
    name: Bad/Bot Behaviour

    # Alert on x events in y seconds
    type: frequency

    # Alert when this many documents matching the query occur within a timeframe
    num_events: 20

    # num_events must occur within this amount of time to trigger an alert
    timeframe:
      seconds: 30

    # A list of elasticsearch filters used for find events
    # These filters are joined with AND and nested in a filtered query
    # For more info: http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/query-dsl.html
    filter:
    - query:
        query_string:
          query: "detections.reason:BEHAVIOUR"

    # Index to search, wildcard supported
    index: bitsensor-detections-*
    timestamp_field: endpoint.localtime
    doc_type: datapoint

    # When the attacker continues, send a new alert after x minutes
    realert:
      minutes: 1

    query_key:
      - context.ip
      - context.http.userAgent

    include:
      - endpoint.location
      - endpoint.name
      - context.http.userAgent
      - context.ip
      - context.php.session.sessionId

    alert_subject: "Bad/Bot behaviour on <{}> | <{}|Show Dashboard>"
    alert_subject_args:
      - endpoint.name
      - kibana_link

    alert_text: |-
      An attack on {} is detected.

      The attacker looks like:
      IP: {}
      Tool: {}

    alert_text_args:
      - endpoint.name
      - context.ip
      - context.http.userAgent

    # The alert is use when a match is found
    alert:
      - slack

    slack_webhook_url: "https://hooks.slack.com/services/"
    slack_username_override: "ElastAlert"

    # Alert body only cointains a title and text
    alert_text_type: alert_text_only

    # Link to BitSensor Kibana Dashboard
    use_kibana4_dashboard: "https://kibana.dashboard.io/app/kibana#/dashboard"
kind: ConfigMap
metadata:
  creationTimestamp: null
  name: rule-templates
